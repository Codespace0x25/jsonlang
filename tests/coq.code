require "../lib/lib.code"
require "../lib/assert.code"

type Int {
    size_t capacity;
    size_t size;
    int *data;
}

defun COQ_init_array(size_t size) Int* {
    Int *arr = (Int *)malloc(sizeof(Int));
    if(arr == NULL) assert("Exit null array initalize");
    arr->data = (int *)malloc(size * sizeof(int));
    arr->capacity = size;
    arr->size = 0;
    return arr;
}

defun COQ_append_array(Int *array, int item) void {
    if (array->capacity <= array->size)
    {
        array->capacity *= array->capacity;
        array->data= (int *)realloc(array->data, array->capacity * sizeof(int));
    }
    array->data[array->size++] = item;
}

defun COQ_get_array_item(Int *array, size_t index) int {
    if(index < array->size) return array->data[index];
    else fprintf(stderr, "Index is out of bound");
    return 1;
}

defun COQ_free_array(Int *array) void {
    free(array->data);
    free(array);
}

defun main(void) int {

    Int *arr = COQ_init_array(10);
    for (int i = 0; i < (int)arr->size; ++i)
    {
        COQ_append_array(arr, i);
    }
    for (int i = 0; i < (int)arr->size; ++i)
    {
        printf("%d\n",  COQ_get_array_item(arr, (size_t)i));
        printf("%d", arr->data[1]);
    }
    COQ_free_array(arr);
}
